@article{VanSolingen2002,
abstract = {As with any engineering discipline, software development requires a measurement mechanism for feedback and evaluation. Measurement is a mechanism for creating a corporate memory and an aid in answering a variety of questions associated with the enactment of any software process. It helps support project planning (e.g., How much will a new project cost?); it allows us to determine the strengths and weaknesses of the current processes and products (e.g., What is the frequency of certain types of errors?); it provides a rationale for adopting/refining techniques (e.g., What is the impact of the technique XX on the productivity of the projects?); it allows us to evaluate the quality of specific processes and products (e.g., What is the defect density in a specific system after deployment?). Measurement also helps, during the course of a project, to assess its progress, to take corrective action based on this assessment, and to evaluate the impact of such action.},
author = {van Solingen, Rini and Basili, Vic and Caldiera, Gianluigi and Rombach, H. Dieter},
doi = {10.1002/0471028959.sof142},
file = {:C$\backslash$:/Users/ovidi/Downloads/The{\_}Goal{\_}Question{\_}Metric{\_}Approach.pdf:pdf},
isbn = {9780471377375},
issn = {{\textless}null{\textgreater}},
journal = {Encyclopedia of Software Engineering},
pages = {1--10},
title = {{Goal Question Metric (GQM) Approach}},
url = {http://doi.wiley.com/10.1002/0471028959.sof142},
volume = {2},
year = {2002}
},
@article{Cunningham1993,
abstract = {W. Cunningham, “The WyCash portfolio management system,” Proc. Object-Oriented Programming Systems, Languages, and Applications (OOPSLA '92) (Addendum), ACM Press, Apr. 1993, pp. 29–30, doi: 10.1145/157709.157715. [2]},
author = {Cunningham, Ward},
doi = {10.1145/157710.157715},
isbn = {0-89791-610-7},
issn = {10556400},
journal = {ACM SIGPLAN OOPS Messenger},
number = {2},
pages = {29--30},
title = {{The WyCash portfolio management system}},
url = {http://portal.acm.org/citation.cfm?doid=157710.157715},
volume = {4},
year = {1993}
},
@article{Li2015,
abstract = {Context: Technical debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefit but may hurt the long-term health of a software system. Objective: This work aims at collecting studies on TD and TD management (TDM), and making a classification and thematic analysis on these studies, to obtain a comprehensive understanding on the TD concept and an overview on the current state of research on TDM. Method: A systematic mapping study was performed to identify and analyze research on TD and its management, covering publications between 1992 and 2013. Results: Ninety-four studies were finally selected. TD was classified into 10 types, 8 TDM activities were identified, and 29 tools for TDM were collected. Conclusions: The term "debt" has been used in different ways by different people, which leads to ambiguous interpretation of the term. Code-related TD and its management have gained the most attention. There is a need formore empirical studieswith high-quality evidence on thewhole TDM process and on the application of specific TDM approaches in industrial settings. Moreover, dedicated TDM tools are needed for managing various types of TD in the whole TDM process.},
author = {Li, Zengyang and Avgeriou, Paris and Liang, Peng},
doi = {10.1016/j.jss.2014.12.027},
isbn = {0164-1212},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Systematic mapping study,Technical debt,Technical debt management},
pages = {193--220},
publisher = {Elsevier Ltd.},
title = {{A systematic mapping study on technical debt and its management}},
url = {http://dx.doi.org/10.1016/j.jss.2014.12.027},
volume = {101},
year = {2015}
},
@article{Codabux2013,
abstract = {Technical debt is the consequence of trade-offs made during software development to ensure speedy releases. The research community lacks rigorously evaluated guidelines to help practitioners characterize, manage and prioritize debt. This paper describes a study conducted with an industrial partner during their implementation of Agile development practices for a large software development division within the company. The report contains our initial findings based on ethnographic observations and semi-structured interviews. The goal is to identify the best practices regarding managing technical debt so that the researchers and the practitioners can further evaluate these practices to extend their knowledge of the technical debt metaphor. We determined that the developers considered their own taxonomy of technical debt based on the type of work they were assigned and their personal understanding of the term. Despite management's high-level categories, the developers mostly considered design debt, testing debt and defect debt. In addition to developers having their own taxonomy, assigning dedicated teams for technical debt reduction and allowing other teams about 20{\%} of time per sprint for debt reduction are good initiatives towards lowering technical debt. While technical debt has become a well-regarded concept in the Agile community, further empirical evaluation is needed to assess how to properly apply the concept for various development organizations.},
author = {Codabux, Zadia and Williams, Byron},
doi = {10.1109/MTD.2013.6608672},
isbn = {978-1-4673-6443-0},
journal = {2013 4th International Workshop on Managing Technical Debt (MTD)},
keywords = {Encoding,Interviews,Maintenance engineering,Organizations,Scrum,Software,Taxonomy,Training,agile development practices,development organizations,ethnographic observations,industrial case study,industrial partner,managing technical debt,semi-structure interviews,software development,software development division,software prototyping,technical debt Agile methods industrial case study},
pages = {8--15},
title = {{Managing technical debt: An industrial case study}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6608672},
year = {2013}
},
@article{Lim2012,
abstract = {An interview study involving 35 practitioners from a variety of domains aimed to characterize technical debt at the ground level to find out how software practitioners perceive it. The study also aimed to understand the context in which technical debt occurs, including its causes, symptoms, and effects. In addition, the study focused on how practitioners currently deal with technical debt. This analysis paints a picture of a large, complex balancing act of various short- and long-term concerns. The Web Extra gives the interview questions used by Erin Lim, Nitin Taksande, and Carolyn Seaman.},
author = {Lim, Erin and Taksande, Nitin and Seaman, Carolyn},
doi = {10.1109/MS.2012.130},
isbn = {0740-7459},
issn = {07407459},
journal = {IEEE Software},
keywords = {maintenance management,software engineering,software maintenance,technical debt},
number = {6},
pages = {22--27},
title = {{A balancing act: What software practitioners have to say about technical debt}},
volume = {29},
year = {2012}
},
@article{Kruchten2012,
author = {Kruchten, Philippe and Nord, Robert L. and Ozkaya, Ipek},
journal = {IEEE Software},
keywords = {Kruchten2012},
pages = {18--22},
title = {{Technical Debt : From Metaphor to Theory and Practice}},
year = {2012}
},
