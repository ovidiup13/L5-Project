@article{VanSolingen2002,
abstract = {As with any engineering discipline, software development requires a measurement mechanism for feedback and evaluation. Measurement is a mechanism for creating a corporate memory and an aid in answering a variety of questions associated with the enactment of any software process. It helps support project planning (e.g., How much will a new project cost?); it allows us to determine the strengths and weaknesses of the current processes and products (e.g., What is the frequency of certain types of errors?); it provides a rationale for adopting/refining techniques (e.g., What is the impact of the technique XX on the productivity of the projects?); it allows us to evaluate the quality of specific processes and products (e.g., What is the defect density in a specific system after deployment?). Measurement also helps, during the course of a project, to assess its progress, to take corrective action based on this assessment, and to evaluate the impact of such action.},
author = {van Solingen, Rini and Basili, Vic and Caldiera, Gianluigi and Rombach, H. Dieter},
doi = {10.1002/0471028959.sof142},
file = {:C$\backslash$:/Users/ovidi/Downloads/The{\_}Goal{\_}Question{\_}Metric{\_}Approach.pdf:pdf},
isbn = {9780471377375},
issn = {{\textless}null{\textgreater}},
journal = {Encyclopedia of Software Engineering},
pages = {1--10},
title = {{Goal Question Metric (GQM) Approach}},
url = {http://doi.wiley.com/10.1002/0471028959.sof142},
volume = {2},
year = {2002}
},
@article{Cunningham1993,
abstract = {W. Cunningham, “The WyCash portfolio management system,” Proc. Object-Oriented Programming Systems, Languages, and Applications (OOPSLA '92) (Addendum), ACM Press, Apr. 1993, pp. 29–30, doi: 10.1145/157709.157715. [2]},
author = {Cunningham, Ward},
doi = {10.1145/157710.157715},
isbn = {0-89791-610-7},
issn = {10556400},
journal = {ACM SIGPLAN OOPS Messenger},
number = {2},
pages = {29--30},
title = {{The WyCash portfolio management system}},
url = {http://portal.acm.org/citation.cfm?doid=157710.157715},
volume = {4},
year = {1993}
},
@article{Li2015,
abstract = {Context: Technical debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefit but may hurt the long-term health of a software system. Objective: This work aims at collecting studies on TD and TD management (TDM), and making a classification and thematic analysis on these studies, to obtain a comprehensive understanding on the TD concept and an overview on the current state of research on TDM. Method: A systematic mapping study was performed to identify and analyze research on TD and its management, covering publications between 1992 and 2013. Results: Ninety-four studies were finally selected. TD was classified into 10 types, 8 TDM activities were identified, and 29 tools for TDM were collected. Conclusions: The term "debt" has been used in different ways by different people, which leads to ambiguous interpretation of the term. Code-related TD and its management have gained the most attention. There is a need formore empirical studieswith high-quality evidence on thewhole TDM process and on the application of specific TDM approaches in industrial settings. Moreover, dedicated TDM tools are needed for managing various types of TD in the whole TDM process.},
author = {Li, Zengyang and Avgeriou, Paris and Liang, Peng},
doi = {10.1016/j.jss.2014.12.027},
isbn = {0164-1212},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Systematic mapping study,Technical debt,Technical debt management},
pages = {193--220},
publisher = {Elsevier Ltd.},
title = {{A systematic mapping study on technical debt and its management}},
url = {http://dx.doi.org/10.1016/j.jss.2014.12.027},
volume = {101},
year = {2015}
},
@article{Codabux2013,
abstract = {Technical debt is the consequence of trade-offs made during software development to ensure speedy releases. The research community lacks rigorously evaluated guidelines to help practitioners characterize, manage and prioritize debt. This paper describes a study conducted with an industrial partner during their implementation of Agile development practices for a large software development division within the company. The report contains our initial findings based on ethnographic observations and semi-structured interviews. The goal is to identify the best practices regarding managing technical debt so that the researchers and the practitioners can further evaluate these practices to extend their knowledge of the technical debt metaphor. We determined that the developers considered their own taxonomy of technical debt based on the type of work they were assigned and their personal understanding of the term. Despite management's high-level categories, the developers mostly considered design debt, testing debt and defect debt. In addition to developers having their own taxonomy, assigning dedicated teams for technical debt reduction and allowing other teams about 20{\%} of time per sprint for debt reduction are good initiatives towards lowering technical debt. While technical debt has become a well-regarded concept in the Agile community, further empirical evaluation is needed to assess how to properly apply the concept for various development organizations.},
author = {Codabux, Zadia and Williams, Byron},
doi = {10.1109/MTD.2013.6608672},
isbn = {978-1-4673-6443-0},
journal = {2013 4th International Workshop on Managing Technical Debt (MTD)},
keywords = {Encoding,Interviews,Maintenance engineering,Organizations,Scrum,Software,Taxonomy,Training,agile development practices,development organizations,ethnographic observations,industrial case study,industrial partner,managing technical debt,semi-structure interviews,software development,software development division,software prototyping,technical debt Agile methods industrial case study},
pages = {8--15},
title = {{Managing technical debt: An industrial case study}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6608672},
year = {2013}
},
@article{Lim2012,
abstract = {An interview study involving 35 practitioners from a variety of domains aimed to characterize technical debt at the ground level to find out how software practitioners perceive it. The study also aimed to understand the context in which technical debt occurs, including its causes, symptoms, and effects. In addition, the study focused on how practitioners currently deal with technical debt. This analysis paints a picture of a large, complex balancing act of various short- and long-term concerns. The Web Extra gives the interview questions used by Erin Lim, Nitin Taksande, and Carolyn Seaman.},
author = {Lim, Erin and Taksande, Nitin and Seaman, Carolyn},
doi = {10.1109/MS.2012.130},
isbn = {0740-7459},
issn = {07407459},
journal = {IEEE Software},
keywords = {maintenance management,software engineering,software maintenance,technical debt},
number = {6},
pages = {22--27},
title = {{A balancing act: What software practitioners have to say about technical debt}},
volume = {29},
year = {2012}
},
@article{Kruchten2012,
author = {Kruchten, Philippe and Nord, Robert L. and Ozkaya, Ipek},
journal = {IEEE Software},
keywords = {Kruchten2012},
pages = {18--22},
title = {{Technical Debt : From Metaphor to Theory and Practice}},
year = {2012}
},
@article{Olbrich2009,
author = {Olbrich, Steffen and Cruzes, Daniela S. and Basili, Victor and Zazworka, Nico},
isbn = {9781424448418},
journal = {Proceedings of the 2009 3rd international symposium on empirical software engineering and measurement, IEEE Computer Society},
number = {April},
pages = {390--400},
title = {{The Evolution and Impact of Code Smells : A Case Study of Two Open Source Systems What are code smells ?}},
year = {2009}
},
@article{Fontana2012,
abstract = {Different forms of technical debt exist that have to be carefully managed. In this paper we focus our attention on design debt, represented by code smells. We consider three smells that we detect in open source systems of different domains. Our principal aim is to give advice on which design debt has to be paid first, according to the three smells we have analyzed. Moreover, we discuss if the detection of these smells could be tailored to the specific application domain of a system.},
author = {Fontana, Francesca Arcelli and Ferme, Vincenzo and Spinelli, Stefano},
doi = {10.1109/MTD.2012.6225993},
isbn = {9781467317498},
issn = {02705257},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
keywords = {code smell refactoring,design debt,software quality metrics},
pages = {15--22},
title = {{Investigating the impact of code smells debt on quality code evaluation}},
year = {2012}
},
@article{Khomh2009,
abstract = {Code smells are poor implementation choices, thought to make object-oriented systems hard to maintain. In this study, we investigate if classes with code smells are more change-prone than classes without smells. Specifically, we test the general hypothesis: classes with code smells are not more change prone than other classes. We detect 29 code smells in 9 releases of Azureus and in 13 releases of Eclipse, and study the relation between classes with these code smells and class change-proneness. We show that, in almost all releases of Azureus and Eclipse, classes with code smells are more change-prone than others, and that specific smells are more correlated than others to change-proneness. These results justify a posteriori previous work on the specification and detection of code smells and could help focusing quality assurance and testing activities.},
author = {Khomh, Foutse and {Di Penta}, Massimiliano and Gu{\'{e}}h{\'{e}}neuc, Yann Ga{\"{e}}l},
doi = {10.1109/WCRE.2009.28},
isbn = {9780769538679},
issn = {10951350},
journal = {Proceedings - Working Conference on Reverse Engineering, WCRE},
keywords = {Code smells,Empirical software engineering,Mining software repositories},
pages = {75--84},
title = {{An exploratory study of the impact of code smells on software change-proneness}},
year = {2009}
},
@article{Charalampidou2017,
abstract = {{\textcopyright} 2017 Association for Computing Machinery. An important parameter in deciding to eliminate technical debt (TD) is the probability of a module to generate interest along software evolution. In this study, we explore code smells, which according to practitioners are the most commonly occurring type of TD in industry, by assessing the associated interest probability. As a proxy of smell interest probability we use the frequency of smell occurrences and the change proneness of the modules in which they are identified. To achieve this goal we present a case study on 47,751 methods extracted from two well-known open source projects. The results of the case study suggest that: (a) modules in which "code smells" are concentrated are more change-prone than smell-free modules, (b) there are specific types of "code smells" that are concentrated in the most change-prone modules, and (c) interest probability of code clones seems to be higher than the other two examined code smells. These results can be useful for both researchers and practitioners, in the sense that the former can focus their research on resolving "code smells" that produce more interest, and the latter can improve accordingly the prioritization of their repayment strategy and their training.},
author = {Charalampidou, S. and Ampatzoglou, A. and Chatzigeorgiou, A. and Avgeriou, P.},
doi = {10.1145/3120459.3120465},
isbn = {9781450352642},
journal = {ACM International Conference Proceeding Series},
keywords = {Case study,Change proneness,Interest probability,Technical debt},
title = {{Assessing code smell interest probability: A case study}},
volume = {Part F1299},
year = {2017}
},