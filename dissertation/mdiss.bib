@misc{DeveloperSurvey2018,
  author = {GitLab},
  title = {{2018 Global Developer Report}},
  howpublished = "\url{https://about.gitlab.com/developer-survey/2018}"
},
@article{Cunningham1993,
abstract = {W. Cunningham, “The WyCash portfolio management system,” Proc. Object-Oriented Programming Systems, Languages, and Applications (OOPSLA '92) (Addendum), ACM Press, Apr. 1993, pp. 29–30, doi: 10.1145/157709.157715. [2]},
author = {Cunningham, Ward},
doi = {10.1145/157710.157715},
isbn = {0-89791-610-7},
issn = {10556400},
journal = {ACM SIGPLAN OOPS Messenger},
number = {2},
pages = {29--30},
title = {{The WyCash portfolio management system}},
url = {http://portal.acm.org/citation.cfm?doid=157710.157715},
volume = {4},
year = {1993}
},
@article{Li2015,
abstract = {Context: Technical debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefit but may hurt the long-term health of a software system. Objective: This work aims at collecting studies on TD and TD management (TDM), and making a classification and thematic analysis on these studies, to obtain a comprehensive understanding on the TD concept and an overview on the current state of research on TDM. Method: A systematic mapping study was performed to identify and analyze research on TD and its management, covering publications between 1992 and 2013. Results: Ninety-four studies were finally selected. TD was classified into 10 types, 8 TDM activities were identified, and 29 tools for TDM were collected. Conclusions: The term "debt" has been used in different ways by different people, which leads to ambiguous interpretation of the term. Code-related TD and its management have gained the most attention. There is a need formore empirical studieswith high-quality evidence on thewhole TDM process and on the application of specific TDM approaches in industrial settings. Moreover, dedicated TDM tools are needed for managing various types of TD in the whole TDM process.},
author = {Li, Zengyang and Avgeriou, Paris and Liang, Peng},
doi = {10.1016/j.jss.2014.12.027},
isbn = {0164-1212},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Systematic mapping study,Technical debt,Technical debt management},
pages = {193--220},
publisher = {Elsevier Ltd.},
title = {{A systematic mapping study on technical debt and its management}},
url = {http://dx.doi.org/10.1016/j.jss.2014.12.027},
volume = {101},
year = {2015}
},
@article{Codabux2013,
abstract = {Technical debt is the consequence of trade-offs made during software development to ensure speedy releases. The research community lacks rigorously evaluated guidelines to help practitioners characterize, manage and prioritize debt. This paper describes a study conducted with an industrial partner during their implementation of Agile development practices for a large software development division within the company. The report contains our initial findings based on ethnographic observations and semi-structured interviews. The goal is to identify the best practices regarding managing technical debt so that the researchers and the practitioners can further evaluate these practices to extend their knowledge of the technical debt metaphor. We determined that the developers considered their own taxonomy of technical debt based on the type of work they were assigned and their personal understanding of the term. Despite management's high-level categories, the developers mostly considered design debt, testing debt and defect debt. In addition to developers having their own taxonomy, assigning dedicated teams for technical debt reduction and allowing other teams about 20{\%} of time per sprint for debt reduction are good initiatives towards lowering technical debt. While technical debt has become a well-regarded concept in the Agile community, further empirical evaluation is needed to assess how to properly apply the concept for various development organizations.},
author = {Codabux, Zadia and Williams, Byron},
doi = {10.1109/MTD.2013.6608672},
isbn = {978-1-4673-6443-0},
journal = {2013 4th International Workshop on Managing Technical Debt (MTD)},
keywords = {Encoding,Interviews,Maintenance engineering,Organizations,Scrum,Software,Taxonomy,Training,agile development practices,development organizations,ethnographic observations,industrial case study,industrial partner,managing technical debt,semi-structure interviews,software development,software development division,software prototyping,technical debt Agile methods industrial case study},
pages = {8--15},
title = {{Managing technical debt: An industrial case study}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6608672},
year = {2013}
},
@article{Lim2012,
abstract = {An interview study involving 35 practitioners from a variety of domains aimed to characterize technical debt at the ground level to find out how software practitioners perceive it. The study also aimed to understand the context in which technical debt occurs, including its causes, symptoms, and effects. In addition, the study focused on how practitioners currently deal with technical debt. This analysis paints a picture of a large, complex balancing act of various short- and long-term concerns. The Web Extra gives the interview questions used by Erin Lim, Nitin Taksande, and Carolyn Seaman.},
author = {Lim, Erin and Taksande, Nitin and Seaman, Carolyn},
doi = {10.1109/MS.2012.130},
isbn = {0740-7459},
issn = {07407459},
journal = {IEEE Software},
keywords = {maintenance management,software engineering,software maintenance,technical debt},
number = {6},
pages = {22--27},
title = {{A balancing act: What software practitioners have to say about technical debt}},
volume = {29},
year = {2012}
},
@article{Kruchten2012,
author = {Kruchten, Philippe and Nord, Robert L. and Ozkaya, Ipek},
journal = {IEEE Software},
keywords = {Kruchten2012},
pages = {18--22},
title = {{Technical Debt : From Metaphor to Theory and Practice}},
year = {2012}
},
@article{Olbrich2009,
author = {Olbrich, Steffen and Cruzes, Daniela S. and Basili, Victor and Zazworka, Nico},
isbn = {9781424448418},
journal = {Proceedings of the 2009 3rd international symposium on empirical software engineering and measurement, IEEE Computer Society},
number = {April},
pages = {390--400},
title = {{The Evolution and Impact of Code Smells : A Case Study of Two Open Source Systems What are code smells ?}},
year = {2009}
},
@article{Fontana2012,
abstract = {Different forms of technical debt exist that have to be carefully managed. In this paper we focus our attention on design debt, represented by code smells. We consider three smells that we detect in open source systems of different domains. Our principal aim is to give advice on which design debt has to be paid first, according to the three smells we have analyzed. Moreover, we discuss if the detection of these smells could be tailored to the specific application domain of a system.},
author = {Fontana, Francesca Arcelli and Ferme, Vincenzo and Spinelli, Stefano},
doi = {10.1109/MTD.2012.6225993},
isbn = {9781467317498},
issn = {02705257},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
keywords = {code smell refactoring,design debt,software quality metrics},
pages = {15--22},
title = {{Investigating the impact of code smells debt on quality code evaluation}},
year = {2012}
},
@article{Khomh2009,
abstract = {Code smells are poor implementation choices, thought to make object-oriented systems hard to maintain. In this study, we investigate if classes with code smells are more change-prone than classes without smells. Specifically, we test the general hypothesis: classes with code smells are not more change prone than other classes. We detect 29 code smells in 9 releases of Azureus and in 13 releases of Eclipse, and study the relation between classes with these code smells and class change-proneness. We show that, in almost all releases of Azureus and Eclipse, classes with code smells are more change-prone than others, and that specific smells are more correlated than others to change-proneness. These results justify a posteriori previous work on the specification and detection of code smells and could help focusing quality assurance and testing activities.},
author = {Khomh, Foutse and {Di Penta}, Massimiliano and Gu{\'{e}}h{\'{e}}neuc, Yann Ga{\"{e}}l},
doi = {10.1109/WCRE.2009.28},
isbn = {9780769538679},
issn = {10951350},
journal = {Proceedings - Working Conference on Reverse Engineering, WCRE},
keywords = {Code smells,Empirical software engineering,Mining software repositories},
pages = {75--84},
title = {{An exploratory study of the impact of code smells on software change-proneness}},
year = {2009}
},
@article{Charalampidou2017,
abstract = {{\textcopyright} 2017 Association for Computing Machinery. An important parameter in deciding to eliminate technical debt (TD) is the probability of a module to generate interest along software evolution. In this study, we explore code smells, which according to practitioners are the most commonly occurring type of TD in industry, by assessing the associated interest probability. As a proxy of smell interest probability we use the frequency of smell occurrences and the change proneness of the modules in which they are identified. To achieve this goal we present a case study on 47,751 methods extracted from two well-known open source projects. The results of the case study suggest that: (a) modules in which "code smells" are concentrated are more change-prone than smell-free modules, (b) there are specific types of "code smells" that are concentrated in the most change-prone modules, and (c) interest probability of code clones seems to be higher than the other two examined code smells. These results can be useful for both researchers and practitioners, in the sense that the former can focus their research on resolving "code smells" that produce more interest, and the latter can improve accordingly the prioritization of their repayment strategy and their training.},
author = {Charalampidou, S. and Ampatzoglou, A. and Chatzigeorgiou, A. and Avgeriou, P.},
doi = {10.1145/3120459.3120465},
isbn = {9781450352642},
journal = {ACM International Conference Proceeding Series},
keywords = {Case study,Change proneness,Interest probability,Technical debt},
title = {{Assessing code smell interest probability: A case study}},
volume = {Part F1299},
year = {2017}
},
@article{Fowler1999,
abstract = {As the application of object technology-particularly the Java programming language-has become commonplace, a new problem has emerged to confront the software development community. Significant numbers of poorly designed programs have been created by less-experienced developers, resulting in applications that are inefficient and hard to maintain and extend. Increasingly, software system professionals are discovering just how difficult it is to work with these inherited, "non-optimal" applications. For several years, expert-level object programmers have employed a growing collection of techniques to improve the structural integrity and performance of such existing software programs. Referred to as "refactoring," these practices have remained in the domain of experts because no attempt has been made to transcribe the lore into a form that all developers could use. . .until now. In Refactoring: Improving the Design of Existing Software, renowned object technology mentor Martin Fowler breaks new ground, demystifying these master practices and demonstrating how software practitioners can realize the significant benefits of this new process. With proper training a skilled system designer can take a bad design and rework it into well-designed, robust code. In this book, Martin Fowler shows you where opportunities for refactoring typically can be found, and how to go about reworking a bad design into a good one. Each refactoring step is simple-seemingly too simple to be worth doing. Refactoring may involve moving a field from one class to another, or pulling some code out of a method to turn it into its own method, or even pushing some code up or down a hierarchy. While these individual steps may seem elementary, the cumulative effect of such small changes can radically improve the design. Refactoring is a proven way to prevent software decay. In addition to discussing the various techniques of refactoring, Refactoring: Improving the Design of Existing Software provides a detailed catalog of more than seventy proven refactorings with helpful pointers that teach you when to apply them; step-by-step instructions for applying each refactoring; and an example illustrating how the refactoring works. The illustrative examples are written in Java, but the ideas are applicable to any object-oriented programming language.},
archivePrefix = {arXiv},
arxivId = {arXiv:gr-qc/9809069v1},
author = {Fowler, Martin and Beck, Kent and Brant, John and Opdyke, William and Roberts, Don},
doi = {10.1007/s10071-009-0219-y},
eprint = {9809069v1},
isbn = {9780201485677},
issn = {14359456},
journal = {Xtemp01},
pages = {1--337},
pmid = {19263100},
primaryClass = {arXiv:gr-qc},
title = {{Refactoring: Improving the Design of Existing Code}},
year = {1999}
},
@article{Singh2014,
abstract = {Evaluating technical debt related to code structure at a fine-grained level of detail is feasible using static code metrics to identify troublesome areas of a software code base. However, estimating the interest payments at a similar level of detail is a manual process relying on developers to submit their estimates as they encounter instances of technical debt. We propose a framework that continuously estimates interest payments using code comprehension metrics produced by a tool that monitors developer activities in the Integrated Development Environment. We describe the framework and demonstrate how it is used to evaluate the presence of technical debt and interest payments accumulated for code in an industrial software product.},
author = {Singh, Vallary and Snipes, Will and Kraft, Nicholas A.},
doi = {10.1109/MTD.2014.16},
isbn = {9781479967919},
journal = {Proceedings - 2014 6th IEEE International Workshop on Managing Technical Debt, MTD 2014},
keywords = {Technical Debt,code metrics,code smells,program comprehension,software maintenance,static analysis},
pages = {27--30},
title = {{A framework for estimating interest on technical debt by monitoring developer activity related to code comprehension}},
year = {2014}
},
@article{Gomes2011,
abstract = {This paper describes a data extraction method that was carried out on a set of historical development documentation, related to a commercial software system for mobile platform. This method is part of a major project, which aims to identify evidences of technical debt via the analysis of the defect evolution and effort estimation deviation, verifying if there are relations between these concepts and project decisions during the cycles of development. We intend that a future analysis of such data supports the identification of patterns regarding specific decisions and variations of the defect number/frequency and effort deviation. Thus, such patterns could assist project managers during future project decisions, mainly regarding the maintenance and evolution stages. {\textcopyright} 2011 ACM.},
author = {Gomes, Rebeka and Siebra, Clauirton and Tonin, Graziela and Cavalcanti, Antonio and da Silva, Fabio Q.B. and Santos, Andre L.M. and Marques, Rafael},
doi = {10.1145/1985362.1985369},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceeding of the 2nd working on Managing technical debt - MTD '11},
keywords = {decision making,effort estimation,evolution of defects},
pages = {27},
title = {{An extraction method to collect data on defects and effort evolution in a constantly modified system}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-79960595082{\&}partnerID=tZOtx3y1},
year = {2011}
}
@article{Power2013,
abstract = {Understanding the impact of technical debt is critical to understanding a team's velocity. For organizations with multiple teams and products, the impact of technical debt combines non-linearly to impact the organization's velocity. We can think of the capacity of a team as a portfolio. Not all of that capacity can be invested in new features or defect fixing, without incurring negative consequences. A portion of the team's capacity needs to be invested in the ongoing management and reduction of technical debt. This paper describes a simple technique for visualizing, quantifying and tracking a team's technical debt as a portion of their overall capacity investment. The knowledge and insights gained through this technique help with better capacity planning, improved forecasting, and helps to justify the business case for investing in managing and reducing technical debt.},
author = {Power, Ken},
doi = {10.1109/MTD.2013.6608675},
isbn = {9781467364430},
journal = {2013 4th International Workshop on Managing Technical Debt, MTD 2013 - Proceedings},
keywords = {Technical debt,capacity,organization capacity,organization velocity,portfolio thinking,real options,team capacity,team velocity,tracking,velocity,visualization},
pages = {28--31},
title = {{Understanding the impact of technical debt on the capacity and velocity of teams and organizations: Viewing team and organization capacity as a portfolio of real options}},
year = {2013}
},
@article{Fontana2016,
abstract = {{\textcopyright} 2016 IEEE.In software maintenance and evolution, it is important to assess both code and architecture in order to identify issues to be solved to improve software quality. Different tools provide some kind of index giving us an overall evaluation of a project to be used when managing its technical debt. In this paper, we outline how the indexes, that we call in general Technical Debt Indexes, provided by five different tools are computed. We describe their principal features and differences, what aspects they are missing, and we outline if (and how) the indexes take into account architectural problems that could have a major impact on the architectural debt. We show that the indexes rely on different information sources and measure different quantities.},
author = {Fontana, Francesca Arcelli and Roveda, Riccardo and Zanoni, Marco},
doi = {10.1109/MTD.2016.11},
isbn = {9781509038541},
journal = {Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016},
keywords = {Architectural Debt,Software Quality Analysis Tools,Technical Debt Indexes},
pages = {28--31},
title = {{Technical Debt Indexes Provided by Tools: A Preliminary Discussion}},
year = {2016}
},
@article{Fontana2011,
abstract = {Detecting code smells in the code and consequently applying the right refactoring steps when necessary is very important to improve the quality of the code. Different tools have been proposed for code smell detection, each one characterized by particular features. The aim of this paper is to describe our experience on using different tools for code smell detection. We outline the main differences among them and the different results we obtained.},
author = {Fontana, Francesca Arcelli and Mariani, Elia and Morniroli, Andrea and Sormani, Raul and Tonello, Alberto},
doi = {10.1109/ICSTW.2011.12},
isbn = {9780769543451},
journal = {Proceedings - 4th IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2011},
keywords = {Code smell detection tools,Code smells,Quality code evaluation,Refactoring},
pages = {450--457},
title = {{An experience report on using code smells detection tools}},
year = {2011}
},
@article{Avgeriou2016,
abstract = {This report documents the program and outcomes of Dagstuhl Seminar 16162, " Managing Tech-nical Debt in Software Engineering. " We summarize the goals and format of the seminar, results from the breakout groups, a definition for technical debt, a draft conceptual model, and a research road map that culminated from the discussions during the seminar. The report also includes the abstracts of the talks presented at the seminar and summaries of open discussions.},
author = {Avgeriou, Paris and Kruchten, Philippe and Ozkaya, Ipek and Seaman, Carolyn and Seaman, Carolyn},
doi = {10.4230/DagRep.6.4.110},
file = {:C$\backslash$:/Users/ovidi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Avgeriou et al. - 2016 - Managing Technical Debt in Software Engineering.pdf:pdf},
issn = {01635948},
journal = {Dagstuhl Reports},
keywords = {110,4,4230,6,and phrases software decay,dagrep,digital object identifier 10,edited in cooperation with,management,robert nord,software economics,software evolution,software project,software quality,technical debt},
number = {4},
pages = {110--138},
title = {{Managing Technical Debt in Software Engineering}},
url = {http://drops.dagstuhl.de/opus/volltexte/2016/6693/pdf/dagrep{\_}v006{\_}i004{\_}p110{\_}s16162.pdf{\%}5Cnhttp://drops.dagstuhl.de/opus/volltexte/2016/6693/},
volume = {6},
year = {2016}
},
@article{Letouzey2012,
abstract = {This paper presents the SQALE (Software Quality Assessment Based on Lifecycle Expectations) method. We describe its Quality Model and Analysis Model which is used to estimate the Quality and the Technical Debt of an application source code. We provide recommendations and guidelines for using the SQALE indicators in order to analyse the structure and the impact of the Technical Debt.},
author = {Letouzey, Jean Louis},
doi = {10.1109/MTD.2012.6225997},
isbn = {9781467317498},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
keywords = {SQALE,Technical Debt,analysis model,quality,quality model,source code},
pages = {31--36},
title = {{The SQALE method for evaluating technical debt}},
year = {2012}
},
@article{Nugroho2011,
abstract = {Cunningham introduced the metaphor of technical debt as guidance for software developers that must trade engineering quality against short-term goals. We revisit the technical debt metaphor, and translate it into terms that can help IT executives better understand their IT investments. An approach is proposed to quantify debts (cost to fix technical quality issues) and interest (extra cost spent on maintenance due to technical quality issues). Our approach is based on an empirical assessment method of software quality developed at the Software Improvement Group (SIG). The core part of the technical debt calculation is constructed on the basis of empirical data of 44 systems that are currently being monitored by SIG. In a case study, we apply the approach to a real system, and discuss how the results provide useful insights on important questions related to IT investment such as the return on investment (ROI) in software quality improvement.},
author = {Nugroho, Ariadi and Visser, Joost and Kuipers, Tobias},
doi = {10.1145/1985362.1985364},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceeding of the 2nd working on Managing technical debt - MTD '11},
keywords = {cost,effort,estimation,maintenance,measurement,software economics},
pages = {1},
title = {{An empirical model of technical debt and interest}},
url = {http://dl.acm.org/citation.cfm?id=1985362.1985364},
year = {2011}
},
@misc{agile-manifesto,
  author = {},
  title = {{Agile Manifesto}},
  howpublished = "\url{http://agilemanifesto.org/}"
},
@misc{CannotMeasureProductivity,
  author = {Martin Fowler},
  title = {{Cannot Measure Productivity}},
  howpublished = "\url{https://martinfowler.com/bliki/CannotMeasureProductivity.html}",
  year = {2003}
},
@article{Silva2017,
abstract = {Refactoring is a well-known technique that is widely adopted by software engineers to improve the design and enable the evolution of a system. Knowing which refactoring operations were applied in a code change is a valuable information to understand software evolution, adapt software components, merge code changes, and other applications. In this paper, we present RefDiff, an automated approach that identifies refactorings performed between two code revisions in a git repository. RefDiff employs a combination of heuristics based on static analysis and code similarity to detect 13 well-known refactoring types. In an evaluation using an oracle of 448 known refactoring operations, distributed across seven Java projects, our approach achieved precision of 100{\%} and recall of 88{\%}. Moreover, our evaluation suggests that RefDiff has superior precision and recall than existing state-of-the-art approaches.},
archivePrefix = {arXiv},
arxivId = {1704.01544},
author = {Silva, Danilo and Valente, Marco Tulio},
doi = {10.1109/MSR.2017.14},
eprint = {1704.01544},
isbn = {9781538615447},
issn = {21601860},
journal = {IEEE International Working Conference on Mining Software Repositories},
keywords = {Git,Software evolution,Software repositories,refactoring},
pages = {269--279},
title = {{RefDiff: Detecting Refactorings in Version Histories}},
year = {2017}
}
