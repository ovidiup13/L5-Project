@article{Theodoropoulos2011,
abstract = {The concept of technical debt provides an excellent tool for describing technology gaps in terms any stakeholder can understand. The technical debt metaphor was pioneered by the software development community and describes technical challenges in that context very well. However, establishing a definitional framework which describes issues affecting quality more broadly will better align to stakeholder perspectives. Building on the existing concept in this way will enable technology stakeholders by providing a centralized technical debt model. The metaphor can then be used to consistently describe quality challenges anywhere within the technical environment. This paper lays the foundation for this conceptual model by proposing a definitional framework that describes how technology gaps affect all aspects of quality.},
author = {Theodoropoulos, Ted and Hofberg, Mark and Kern, Daniel},
doi = {10.1145/1985362.1985373},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceedings of the 2nd working on Managing Technical Debt},
keywords = {governance,risk management,software quality,technical debt},
pages = {43},
title = {{Technical Debt from the Stakeholder Perspective}},
url = {http://dl.acm.org/citation.cfm?id=1985362.1985373},
year = {2011}
},
@article{Letouzey2012,
abstract = {This paper presents the SQALE (Software Quality Assessment Based on Lifecycle Expectations) method. We describe its Quality Model and Analysis Model which is used to estimate the Quality and the Technical Debt of an application source code. We provide recommendations and guidelines for using the SQALE indicators in order to analyse the structure and the impact of the Technical Debt.},
author = {Letouzey, Jean Louis},
doi = {10.1109/MTD.2012.6225997},
isbn = {9781467317498},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
keywords = {SQALE,Technical Debt,analysis model,quality,quality model,source code},
pages = {31--36},
title = {{The SQALE method for evaluating technical debt}},
year = {2012}
},
@article{Klinger2011,
abstract = {Technical debt is a term that has been used to describe the increased cost of changing or maintaining a system due to expedient shortcuts taken during its development. Much of the research on technical debt has focused on decisions made by project architects and individual developers who choose to trade off short-term gain for a longer-term cost. However, in the context of enterprise software development, such a model may be too narrow. We explore the premise that technical debt within the enterprise should be viewed as a tool similar to financial leverage, allowing the organization to incur debt to pursue options that it couldn't otherwise afford. We test this premise by interviewing a set of experienced architects to understand how decisions to acquire technical debt are made within an enterprise, and to what extent the acquisition of technical debt provides leverage. We find that in many cases, the decision to acquire technical debt is not made by technical architects, but rather by non-technical stakeholders who cause the project to acquire new technical debt or discover existing technical debt that wasn't previously visible. We conclude with some preliminary observations and recommendations for organizations to better manage technical debt in the presence of some enterprise-scale circumstances.},
author = {Klinger, Tim and Tarr, Peri and Wagstrom, Patrick and Williams, Clay},
doi = {10.1145/1985362.1985371},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceeding of the 2nd working on Managing technical debt - MTD '11},
keywords = {extended stakeholders,leverage,technical debt},
pages = {35},
title = {{An enterprise perspective on technical debt}},
url = {http://dl.acm.org/citation.cfm?id=1985362.1985371},
year = {2011}
},
@article{Zazworka2011,
abstract = {Technical debt is a metaphor describing situations where developers accept sacrifices in one dimension of development (e.g. software quality) in order to optimize another dimension (e.g. implementing necessary features before a deadline). Approaches, such as code smell detection, have been developed to identify particular kinds of debt, e.g. design debt. What has not yet been understood is the impact design debt has on the quality of a software product. Answering this question is important for understanding how growing debt affects a software product and how it slows down development, e.g. though introducing rework such as fixing bugs. In this case study we investigate how design debt, in the form of god classes, affects the maintainability and correctness of software products by studying two sample applications of a small-size software development company. The results show that god classes are changed more often and contain more defects than non-god classes. This result complements findings of earlier research and suggests that technical debt has a negative impact on software quality, and should therefore be identified and managed closely in the development process.},
author = {Zazworka, Nico and Shaw, Michele a. and Shull, Forrest and Seaman, Carolyn},
doi = {10.1145/1985362.1985366},
isbn = {9781450305860},
issn = {02705257},
journal = {Workshop on Managing Technical Debt},
keywords = {1,2 paying off design,code smells,debt,design debt,god class,maintainability,refactoring,technical debt},
pages = {17--23},
title = {{Investigating the Impact of Design Debt on Software Quality}},
year = {2011}
},
@article{Nugroho2011,
abstract = {Cunningham introduced the metaphor of technical debt as guidance for software developers that must trade engineering quality against short-term goals. We revisit the technical debt metaphor, and translate it into terms that can help IT executives better understand their IT investments. An approach is proposed to quantify debts (cost to fix technical quality issues) and interest (extra cost spent on maintenance due to technical quality issues). Our approach is based on an empirical assessment method of software quality developed at the Software Improvement Group (SIG). The core part of the technical debt calculation is constructed on the basis of empirical data of 44 systems that are currently being monitored by SIG. In a case study, we apply the approach to a real system, and discuss how the results provide useful insights on important questions related to IT investment such as the return on investment (ROI) in software quality improvement.},
author = {Nugroho, Ariadi and Visser, Joost and Kuipers, Tobias},
doi = {10.1145/1985362.1985364},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceeding of the 2nd working on Managing technical debt - MTD '11},
keywords = {cost,effort,estimation,maintenance,measurement,software economics},
pages = {1},
title = {{An empirical model of technical debt and interest}},
url = {http://dl.acm.org/citation.cfm?id=1985362.1985364},
year = {2011}
},
@article{Guo2011,
abstract = {Technical debt describes the effect of immature software artifacts on software maintenance - the potential of extra effort required in future as if paying interest for the incurred debt. The uncertainty of interest payment further complicates the problem of what debt should be incurred or repaid and when. To help software managers make informed decisions, a portfolio approach is proposed in this paper. The approach leverages the portfolio management theory in the finance domain to determine the optimal collection of technical debt items that should be incurred or held. We expect this approach could provide a new perspective for technical debt management.},
author = {Guo, Yuepu and Seaman, Carolyn},
doi = {10.1145/1985362.1985370},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceeding of the 2nd working on Managing technical debt - MTD '11},
keywords = {decision making,portfolio,software maintenance,software risk,technical debt},
pages = {31},
pmid = {19249439},
title = {{A portfolio approach to technical debt management}},
url = {http://dl.acm.org/citation.cfm?id=1985362.1985370},
year = {2011}
},
@article{Brown2010,
abstract = {Delivering increasingly complex software-reliant systems demands better ways to manage the long-term effects of short-term expedients. The technical debt metaphor is gaining significant traction in the agile development community as a way to understand and communicate such issues. The idea is that developers sometimes accept compromises in a system in one dimension (e.g., modularity) to meet an urgent demand in some other dimension (e.g., a deadline), and that such compromises incur a "debt": on which "interest" has to be paid and which the "principal" should be repaid at some point for the long-term health of the project. We argue that the software engineering research community has an opportunity to study and improve this concept. We can offer software engineers a foundation for managing such trade-offs based on models of their economic impacts. Therefore, we propose managing technical debt as a part of the future research agenda for the software engineering field.},
author = {Brown, Nanette and Ozkaya, Ipek and Sangwan, Raghvinder and Seaman, Carolyn and Sullivan, Kevin and Zazworka, Nico and Cai, Yuanfang and Guo, Yuepu and Kazman, Rick and Kim, Miryung and Kruchten, Philippe and Lim, Erin and MacCormack, Alan and Nord, Robert},
doi = {10.1145/1882362.1882373},
isbn = {9781450304276},
journal = {Proceedings of the FSE/SDP workshop on Future of software engineering research - FoSER '10},
keywords = {analysis,cost-benefit,design decision trade-off,large-scale system development,software metrics,technical debt},
pages = {47},
title = {{Managing technical debt in software-reliant systems}},
url = {http://portal.acm.org/citation.cfm?doid=1882362.1882373},
year = {2010}
},
@article{Kruchten2012,
author = {Kruchten, Philippe and Nord, Robert L. and Ozkaya, Ipek},
journal = {IEEE Software},
keywords = {Kruchten2012},
pages = {18--22},
title = {{Technical Debt : From Metaphor to Theory and Practice}},
year = {2012}
},
@article{Lim2012,
abstract = {An interview study involving 35 practitioners from a variety of domains aimed to characterize technical debt at the ground level to find out how software practitioners perceive it. The study also aimed to understand the context in which technical debt occurs, including its causes, symptoms, and effects. In addition, the study focused on how practitioners currently deal with technical debt. This analysis paints a picture of a large, complex balancing act of various short- and long-term concerns. The Web Extra gives the interview questions used by Erin Lim, Nitin Taksande, and Carolyn Seaman.},
author = {Lim, Erin and Taksande, Nitin and Seaman, Carolyn},
doi = {10.1109/MS.2012.130},
isbn = {0740-7459},
issn = {07407459},
journal = {IEEE Software},
keywords = {maintenance management,software engineering,software maintenance,technical debt},
number = {6},
pages = {22--27},
title = {{A balancing act: What software practitioners have to say about technical debt}},
volume = {29},
year = {2012}
},
@article{Zazworka2011,
abstract = {Technical debt is the technical work developers owe a system, typically caused by speeding up development, e.g. before a software release. Approaches, such as code smell detection, have been developed to identify particular kinds of debt, e.g. design debt. Up until now, code smell detection has been used to help point to components that need to be freed from debt by refactoring. To date, a number of methods have been described for finding code smells in a system. However, typical debt properties, such as the value of the debt and interest rate to be paid, have not been well established. This position paper proposes an approach to using cost/benefit analysis to prioritize technical debt reduction work by ranking the value and interest of design debt caused by god classes. The method is based on metric analysis and software repository mining and is demonstrated on a commercial software application at a mid-size development company. The results are promising: the method helps to identify which refactoring activities should be performed first because they are likely to be cheap to make yet have significant effect, and which refactorings should be postponed due to high cost and low payoff.},
author = {Zazworka, Nico and Seaman, Carolyn and Shull, Forrest},
doi = {10.1145/1985362.1985372},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceeding of the 2nd working on Managing technical debt - MTD '11},
keywords = {code smells,design debt,god class,maintainability,refactoring,technical debt},
pages = {39},
title = {{Prioritizing design debt investment opportunities}},
url = {http://dl.acm.org/citation.cfm?id=1985362.1985372},
year = {2011}
},
@article{Fontana2012,
abstract = {Different forms of technical debt exist that have to be carefully managed. In this paper we focus our attention on design debt, represented by code smells. We consider three smells that we detect in open source systems of different domains. Our principal aim is to give advice on which design debt has to be paid first, according to the three smells we have analyzed. Moreover, we discuss if the detection of these smells could be tailored to the specific application domain of a system.},
author = {Fontana, Francesca Arcelli and Ferme, Vincenzo and Spinelli, Stefano},
doi = {10.1109/MTD.2012.6225993},
isbn = {9781467317498},
issn = {02705257},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
keywords = {code smell refactoring,design debt,software quality metrics},
pages = {15--22},
title = {{Investigating the impact of code smells debt on quality code evaluation}},
year = {2012}
},
@article{Ernst2012,
abstract = {Technical debt is the trading of long-term software quality in favor of short-term expediency. While the concept has traditionally been applied to tradeoffs at the code and architecture phases, it also manifests itself in the system requirements analysis phase. Little attention has been paid to requirements over time in software: requirements are often badly out of synch with the implementation, or not used at all. However, requirements are the ultimate validation of project success, since they are the manifestation of the stakeholder's desires for the system. In this position paper, we define technical debt in requirements as the distance between the implementation and the actual state of the world. We highlight how a requirements modeling tool, RE-KOMBINE, makes requirements, domain constraints and implementation first-class concerns. RE-KOMBINE represents technical debt using the notion of optimal solutions to a requirements problem. We show how this interpretation of technical debt may be useful in deciding how much requirements analysis is sufficient.},
author = {Ernst, Neil A.},
doi = {10.1109/MTD.2012.6226002},
isbn = {9781467317498},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
pages = {61--64},
title = {{On the role of requirements in understanding and managing technical debt}},
year = {2012}
}









