@article{Theodoropoulos2011,
abstract = {The concept of technical debt provides an excellent tool for describing technology gaps in terms any stakeholder can understand. The technical debt metaphor was pioneered by the software development community and describes technical challenges in that context very well. However, establishing a definitional framework which describes issues affecting quality more broadly will better align to stakeholder perspectives. Building on the existing concept in this way will enable technology stakeholders by providing a centralized technical debt model. The metaphor can then be used to consistently describe quality challenges anywhere within the technical environment. This paper lays the foundation for this conceptual model by proposing a definitional framework that describes how technology gaps affect all aspects of quality.},
author = {Theodoropoulos, Ted and Hofberg, Mark and Kern, Daniel},
doi = {10.1145/1985362.1985373},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceedings of the 2nd working on Managing Technical Debt},
keywords = {governance,risk management,software quality,technical debt},
pages = {43},
title = {{Technical Debt from the Stakeholder Perspective}},
url = {http://dl.acm.org/citation.cfm?id=1985362.1985373},
year = {2011}
},
@article{Letouzey2012,
abstract = {This paper presents the SQALE (Software Quality Assessment Based on Lifecycle Expectations) method. We describe its Quality Model and Analysis Model which is used to estimate the Quality and the Technical Debt of an application source code. We provide recommendations and guidelines for using the SQALE indicators in order to analyse the structure and the impact of the Technical Debt.},
author = {Letouzey, Jean Louis},
doi = {10.1109/MTD.2012.6225997},
isbn = {9781467317498},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
keywords = {SQALE,Technical Debt,analysis model,quality,quality model,source code},
pages = {31--36},
title = {{The SQALE method for evaluating technical debt}},
year = {2012}
},
@article{Klinger2011,
abstract = {Technical debt is a term that has been used to describe the increased cost of changing or maintaining a system due to expedient shortcuts taken during its development. Much of the research on technical debt has focused on decisions made by project architects and individual developers who choose to trade off short-term gain for a longer-term cost. However, in the context of enterprise software development, such a model may be too narrow. We explore the premise that technical debt within the enterprise should be viewed as a tool similar to financial leverage, allowing the organization to incur debt to pursue options that it couldn't otherwise afford. We test this premise by interviewing a set of experienced architects to understand how decisions to acquire technical debt are made within an enterprise, and to what extent the acquisition of technical debt provides leverage. We find that in many cases, the decision to acquire technical debt is not made by technical architects, but rather by non-technical stakeholders who cause the project to acquire new technical debt or discover existing technical debt that wasn't previously visible. We conclude with some preliminary observations and recommendations for organizations to better manage technical debt in the presence of some enterprise-scale circumstances.},
author = {Klinger, Tim and Tarr, Peri and Wagstrom, Patrick and Williams, Clay},
doi = {10.1145/1985362.1985371},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceeding of the 2nd working on Managing technical debt - MTD '11},
keywords = {extended stakeholders,leverage,technical debt},
pages = {35},
title = {{An enterprise perspective on technical debt}},
url = {http://dl.acm.org/citation.cfm?id=1985362.1985371},
year = {2011}
},
@article{Zazworka2011,
abstract = {Technical debt is a metaphor describing situations where developers accept sacrifices in one dimension of development (e.g. software quality) in order to optimize another dimension (e.g. implementing necessary features before a deadline). Approaches, such as code smell detection, have been developed to identify particular kinds of debt, e.g. design debt. What has not yet been understood is the impact design debt has on the quality of a software product. Answering this question is important for understanding how growing debt affects a software product and how it slows down development, e.g. though introducing rework such as fixing bugs. In this case study we investigate how design debt, in the form of god classes, affects the maintainability and correctness of software products by studying two sample applications of a small-size software development company. The results show that god classes are changed more often and contain more defects than non-god classes. This result complements findings of earlier research and suggests that technical debt has a negative impact on software quality, and should therefore be identified and managed closely in the development process.},
author = {Zazworka, Nico and Shaw, Michele a. and Shull, Forrest and Seaman, Carolyn},
doi = {10.1145/1985362.1985366},
isbn = {9781450305860},
issn = {02705257},
journal = {Workshop on Managing Technical Debt},
keywords = {1,2 paying off design,code smells,debt,design debt,god class,maintainability,refactoring,technical debt},
pages = {17--23},
title = {{Investigating the Impact of Design Debt on Software Quality}},
year = {2011}
},
@article{Nugroho2011,
abstract = {Cunningham introduced the metaphor of technical debt as guidance for software developers that must trade engineering quality against short-term goals. We revisit the technical debt metaphor, and translate it into terms that can help IT executives better understand their IT investments. An approach is proposed to quantify debts (cost to fix technical quality issues) and interest (extra cost spent on maintenance due to technical quality issues). Our approach is based on an empirical assessment method of software quality developed at the Software Improvement Group (SIG). The core part of the technical debt calculation is constructed on the basis of empirical data of 44 systems that are currently being monitored by SIG. In a case study, we apply the approach to a real system, and discuss how the results provide useful insights on important questions related to IT investment such as the return on investment (ROI) in software quality improvement.},
author = {Nugroho, Ariadi and Visser, Joost and Kuipers, Tobias},
doi = {10.1145/1985362.1985364},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceeding of the 2nd working on Managing technical debt - MTD '11},
keywords = {cost,effort,estimation,maintenance,measurement,software economics},
pages = {1},
title = {{An empirical model of technical debt and interest}},
url = {http://dl.acm.org/citation.cfm?id=1985362.1985364},
year = {2011}
},
@article{Guo2011,
abstract = {Technical debt describes the effect of immature software artifacts on software maintenance - the potential of extra effort required in future as if paying interest for the incurred debt. The uncertainty of interest payment further complicates the problem of what debt should be incurred or repaid and when. To help software managers make informed decisions, a portfolio approach is proposed in this paper. The approach leverages the portfolio management theory in the finance domain to determine the optimal collection of technical debt items that should be incurred or held. We expect this approach could provide a new perspective for technical debt management.},
author = {Guo, Yuepu and Seaman, Carolyn},
doi = {10.1145/1985362.1985370},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceeding of the 2nd working on Managing technical debt - MTD '11},
keywords = {decision making,portfolio,software maintenance,software risk,technical debt},
pages = {31},
pmid = {19249439},
title = {{A portfolio approach to technical debt management}},
url = {http://dl.acm.org/citation.cfm?id=1985362.1985370},
year = {2011}
},
@article{Brown2010,
abstract = {Delivering increasingly complex software-reliant systems demands better ways to manage the long-term effects of short-term expedients. The technical debt metaphor is gaining significant traction in the agile development community as a way to understand and communicate such issues. The idea is that developers sometimes accept compromises in a system in one dimension (e.g., modularity) to meet an urgent demand in some other dimension (e.g., a deadline), and that such compromises incur a "debt": on which "interest" has to be paid and which the "principal" should be repaid at some point for the long-term health of the project. We argue that the software engineering research community has an opportunity to study and improve this concept. We can offer software engineers a foundation for managing such trade-offs based on models of their economic impacts. Therefore, we propose managing technical debt as a part of the future research agenda for the software engineering field.},
author = {Brown, Nanette and Ozkaya, Ipek and Sangwan, Raghvinder and Seaman, Carolyn and Sullivan, Kevin and Zazworka, Nico and Cai, Yuanfang and Guo, Yuepu and Kazman, Rick and Kim, Miryung and Kruchten, Philippe and Lim, Erin and MacCormack, Alan and Nord, Robert},
doi = {10.1145/1882362.1882373},
isbn = {9781450304276},
journal = {Proceedings of the FSE/SDP workshop on Future of software engineering research - FoSER '10},
keywords = {analysis,cost-benefit,design decision trade-off,large-scale system development,software metrics,technical debt},
pages = {47},
title = {{Managing technical debt in software-reliant systems}},
url = {http://portal.acm.org/citation.cfm?doid=1882362.1882373},
year = {2010}
},
@article{Kruchten2012,
author = {Kruchten, Philippe and Nord, Robert L. and Ozkaya, Ipek},
journal = {IEEE Software},
keywords = {Kruchten2012},
pages = {18--22},
title = {{Technical Debt : From Metaphor to Theory and Practice}},
year = {2012}
},
@article{Lim2012,
abstract = {An interview study involving 35 practitioners from a variety of domains aimed to characterize technical debt at the ground level to find out how software practitioners perceive it. The study also aimed to understand the context in which technical debt occurs, including its causes, symptoms, and effects. In addition, the study focused on how practitioners currently deal with technical debt. This analysis paints a picture of a large, complex balancing act of various short- and long-term concerns. The Web Extra gives the interview questions used by Erin Lim, Nitin Taksande, and Carolyn Seaman.},
author = {Lim, Erin and Taksande, Nitin and Seaman, Carolyn},
doi = {10.1109/MS.2012.130},
isbn = {0740-7459},
issn = {07407459},
journal = {IEEE Software},
keywords = {maintenance management,software engineering,software maintenance,technical debt},
number = {6},
pages = {22--27},
title = {{A balancing act: What software practitioners have to say about technical debt}},
volume = {29},
year = {2012}
},
@article{Zazworka2011Prioritise,
abstract = {Technical debt is the technical work developers owe a system, typically caused by speeding up development, e.g. before a software release. Approaches, such as code smell detection, have been developed to identify particular kinds of debt, e.g. design debt. Up until now, code smell detection has been used to help point to components that need to be freed from debt by refactoring. To date, a number of methods have been described for finding code smells in a system. However, typical debt properties, such as the value of the debt and interest rate to be paid, have not been well established. This position paper proposes an approach to using cost/benefit analysis to prioritize technical debt reduction work by ranking the value and interest of design debt caused by god classes. The method is based on metric analysis and software repository mining and is demonstrated on a commercial software application at a mid-size development company. The results are promising: the method helps to identify which refactoring activities should be performed first because they are likely to be cheap to make yet have significant effect, and which refactorings should be postponed due to high cost and low payoff.},
author = {Zazworka, Nico and Seaman, Carolyn and Shull, Forrest},
doi = {10.1145/1985362.1985372},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceeding of the 2nd working on Managing technical debt - MTD '11},
keywords = {code smells,design debt,god class,maintainability,refactoring,technical debt},
pages = {39},
title = {{Prioritizing design debt investment opportunities}},
url = {http://dl.acm.org/citation.cfm?id=1985362.1985372},
year = {2011}
},
@article{Fontana2012,
abstract = {Different forms of technical debt exist that have to be carefully managed. In this paper we focus our attention on design debt, represented by code smells. We consider three smells that we detect in open source systems of different domains. Our principal aim is to give advice on which design debt has to be paid first, according to the three smells we have analyzed. Moreover, we discuss if the detection of these smells could be tailored to the specific application domain of a system.},
author = {Fontana, Francesca Arcelli and Ferme, Vincenzo and Spinelli, Stefano},
doi = {10.1109/MTD.2012.6225993},
isbn = {9781467317498},
issn = {02705257},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
keywords = {code smell refactoring,design debt,software quality metrics},
pages = {15--22},
title = {{Investigating the impact of code smells debt on quality code evaluation}},
year = {2012}
},
@article{Ernst2012,
abstract = {Technical debt is the trading of long-term software quality in favor of short-term expediency. While the concept has traditionally been applied to tradeoffs at the code and architecture phases, it also manifests itself in the system requirements analysis phase. Little attention has been paid to requirements over time in software: requirements are often badly out of synch with the implementation, or not used at all. However, requirements are the ultimate validation of project success, since they are the manifestation of the stakeholder's desires for the system. In this position paper, we define technical debt in requirements as the distance between the implementation and the actual state of the world. We highlight how a requirements modeling tool, RE-KOMBINE, makes requirements, domain constraints and implementation first-class concerns. RE-KOMBINE represents technical debt using the notion of optimal solutions to a requirements problem. We show how this interpretation of technical debt may be useful in deciding how much requirements analysis is sufficient.},
author = {Ernst, Neil A.},
doi = {10.1109/MTD.2012.6226002},
isbn = {9781467317498},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
pages = {61--64},
title = {{On the role of requirements in understanding and managing technical debt}},
year = {2012}
},
@article{Bohnet2011,
abstract = {Software development projects are difficult to manage, in general, due to the friction between completing system features and, at the same time, obtaining a high degree of code quality to ensure maintainability of the system in the future. A major challenge of this optimization problem is that code quality is less visible to stakeholders in the development process, particularly, to the management. In this paper, we describe an approach for automated software analysis and monitoring of both quality-related code metrics and development activities by means of software maps. A software map represents an adaptive, hierarchical representation of software implementation artifacts such as source code files being organized in a modular hierarchy. The maps can express and combine information about software development, software quality, and system dynamics; they can systematically be specified, automatically generated, and organized by templates. The maps aim at supporting decision-making processes. For example, they facilitate to decide where in the code an increase of quality would be beneficial both for speeding up current development activities and for reducing risks of future maintenance problems. Due to their high degree of expressiveness and their instantaneous generation, the maps additionally serve as up-to-date information tools, bridging an essential information gap between management and development, improve awareness, and serve as early risk detection instrument. The software map concept and its tool implementation are evaluated by means of two case studies on large industrially developed software systems. {\textcopyright} 2011 ACM.},
author = {Bohnet, Johannes and D{\"{o}}llner, J{\"{u}}rgen},
doi = {10.1145/1985362.1985365},
isbn = {9781450305860},
issn = {02705257},
journal = {Proceeding of the 2nd working on Managing technical debt - MTD '11},
keywords = {automated software analysis,managing technical debt,refactoring,software quality,software visualization},
pages = {9},
title = {{Monitoring code quality and development activity by software maps}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-79960574745{\&}partnerID=tZOtx3y1},
year = {2011}
},
@article{Curtis2012,
abstract = {This study summarizes results of a study of Technical Debt across 745 business applications comprising 365 million lines of code collected from 160 companies in 10 industry segments. These applications were submitted to a static analysis that evaluates quality within and across application layers that may be coded in different languages. The analysis consists of evaluating the application against a repository of over 1200 rules of good architectural and coding practice. A formula for estimating Technical Debt with adjustable parameters is presented. Results are presented for Technical Debt across the entire sample as well as for different programming languages and quality factors.},
author = {Curtis, Bill and Sappidi, Jay and Szynkarski, Alexandra},
doi = {10.1109/MTD.2012.6226000},
isbn = {9781467317498},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
keywords = {benchmarking,software metrics,software structural quality,static analysis,technical debt},
pages = {49--53},
title = {{Estimating the size, cost, and types of technical debt}},
year = {2012}
},
@article{Seaman2012,
abstract = {The management of technical debt ultimately requires decision making - about incurring, paying off, or deferring technical debt instances. This position paper discusses several existing approaches to complex decision making, and suggests that exploring their applicability to technical debt decision making would be a worthwhile subject for further research.},
author = {Seaman, Carolyn and Guo, Yuepu and Zazworka, Nico and Shull, Forrest and Izurieta, Clemente and Cai, Yuanfang and Vetr{\`{o}}, Antonio},
doi = {10.1109/MTD.2012.6225999},
file = {:C$\backslash$:/Users/ovidi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Seaman et al. - 2012 - Using technical debt data in decision making Potential decision approaches.pdf:pdf},
isbn = {9781467317498},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
keywords = {Analytic Hierarchy Process,cost-benefit analysis,decision making,options,portfolio management,technical debt},
pages = {45--48},
title = {{Using technical debt data in decision making: Potential decision approaches}},
year = {2012}
},
@article{Morgenthaler2012,
abstract = {With a large and rapidly changing codebase,$\backslash$r$\backslash$nGoogle software engineers are constantly paying interest on$\backslash$r$\backslash$nvarious forms of technical debt. Google engineers also make$\backslash$r$\backslash$nefforts to pay down that debt, whether through special Fixit$\backslash$r$\backslash$ndays, or via dedicated teams, variously known as janitors,$\backslash$r$\backslash$ncultivators, or demolition experts. We describe several related$\backslash$r$\backslash$nefforts to measure and pay down technical debt found in$\backslash$r$\backslash$nGoogle's BUILD files and associated dead code. We address$\backslash$r$\backslash$ndebt found in dependency specifications, unbuildable targets,$\backslash$r$\backslash$nand unnecessary command line flags. These efforts often expose$\backslash$r$\backslash$nother forms of technical debt that must first be managed.},
author = {Morgenthaler, J. David and Gridnev, Misha and Sauciuc, Raluca and Bhansali, Sanjay},
doi = {10.1109/MTD.2012.6225994},
isbn = {9781467317498},
issn = {09639314},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
keywords = {build system,monolithic codebase,technical debt},
pages = {1--6},
title = {{Searching for build debt: Experiences managing technical debt at Google}},
year = {2012}
},
@article{Codabux2013,
abstract = {Technical debt is the consequence of trade-offs made during software development to ensure speedy releases. The research community lacks rigorously evaluated guidelines to help practitioners characterize, manage and prioritize debt. This paper describes a study conducted with an industrial partner during their implementation of Agile development practices for a large software development division within the company. The report contains our initial findings based on ethnographic observations and semi-structured interviews. The goal is to identify the best practices regarding managing technical debt so that the researchers and the practitioners can further evaluate these practices to extend their knowledge of the technical debt metaphor. We determined that the developers considered their own taxonomy of technical debt based on the type of work they were assigned and their personal understanding of the term. Despite management's high-level categories, the developers mostly considered design debt, testing debt and defect debt. In addition to developers having their own taxonomy, assigning dedicated teams for technical debt reduction and allowing other teams about 20{\%} of time per sprint for debt reduction are good initiatives towards lowering technical debt. While technical debt has become a well-regarded concept in the Agile community, further empirical evaluation is needed to assess how to properly apply the concept for various development organizations.},
author = {Codabux, Zadia and Williams, Byron},
doi = {10.1109/MTD.2013.6608672},
isbn = {978-1-4673-6443-0},
journal = {2013 4th International Workshop on Managing Technical Debt (MTD)},
keywords = {Encoding,Interviews,Maintenance engineering,Organizations,Scrum,Software,Taxonomy,Training,agile development practices,development organizations,ethnographic observations,industrial case study,industrial partner,managing technical debt,semi-structure interviews,software development,software development division,software prototyping,technical debt Agile methods industrial case study},
pages = {8--15},
title = {{Managing technical debt: An industrial case study}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6608672},
year = {2013}
},
@article{Schmid2013,
abstract = {Over recent years the topic of technical debt has gained significant attention in the software engineering community. The area of technical debt research is somewhat peculiar within software engineering as it is built on a metaphor. This has certainly benefited the field as it helps to achieve a lot of attention and eases communication about the topic, however, it seems it is to some extent also sidetracking research work, if the metaphor is used beyond its range of applicability. In this paper, we focus on the limits of the metaphor and the problems that arise when over-extending its applicability. We do also aim at providing some additional insights by proposing certain ways of handling these restrictions.},
author = {Schmid, Klaus},
doi = {10.1109/MTD.2013.6608681},
isbn = {9781467364430},
journal = {2013 4th International Workshop on Managing Technical Debt, MTD 2013 - Proceedings},
keywords = {Economic Model,Metaphor,Software Architecture,Technical Debt},
pages = {63--66},
title = {{On the limits of the technical debt metaphor some guidance on going beyond}},
year = {2013}
},
@article{Holvitie2014,
abstract = {A major reason for the popularity of agile and lean software methods is their capability to function in resource scarce and requirement erratic environments. Both of these characteristics cause accumulation of technical debt, something that is the end result of either intentional or unintentional decisions. The ability of these methods to function with technical debt indicates that they contain components with inherent technical debt management capabilities. This study conducts a survey on industry practitioners to discover what is their level of technical debt knowledge, how does technical debt manifest in their projects and which of the applied components of agile software development -- both processes and practices -- are sensitive to technical debt. This paper contributes to the technical debt discussion by showing differences in assumed and indicated technical debt knowledge. Furthermore, components closest to implementation and its maintenance are perceived to have the most positive effects on technical debt management. Finally, the most encountered instances of technical debt are caused by architectural inadequacies, they are internal legacy, and increase in size as a result of continued implementation.},
author = {Holvitie, Johannes and Lepp{\"{a}}nen, Ville and Hyrynsalmi, Sami},
doi = {10.1109/MTD.2014.8},
file = {:C$\backslash$:/Users/ovidi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Holvitie, Lepp{\"{a}}nen, Hyrynsalmi - 2014 - Technical debt and the effect of agile software development practices on it - An industry practi.pdf:pdf},
isbn = {9781479967919},
journal = {Proceedings - 2014 6th IEEE International Workshop on Managing Technical Debt, MTD 2014},
keywords = {agile software development practices,agile software development processes,survey,technical debt},
pages = {35--42},
title = {{Technical debt and the effect of agile software development practices on it - An industry practitioner survey}},
year = {2014}
},
@article{Fontana2017,
abstract = {We report on the Ninth International Workshop on Managing Technical Debt, collocated with the 18th International Conference on Agile Software Development (XP 2017) in Cologne. The technical debt research community continues to expand through collaborations of industry, tool vendors, and academia. The theme of this year's workshop was on technical debt in agile development. Presentations and discussion centered on the topics: technical debt at the code level, architectural technical debt assessment, agile approaches and their impact on technical debt management, and selling the business case of technical debt management.},
author = {Fontana, Francesca Arcelli and Chatzigeorgiou, Alexander and Trumler, Wolfgang and Izurieta, Clemente and Avgeriou, Paris and Nord, Robert L.},
doi = {10.1145/3127360.3127372},
issn = {01635948},
journal = {ACM SIGSOFT Software Engineering Notes},
keywords = {agile development,evolution,software,software analytics,software economics,software quality,technical debt},
number = {3},
pages = {18--21},
title = {{Technical Debt in Agile Development}},
url = {http://dl.acm.org/citation.cfm?doid=3127360.3127372},
volume = {42},
year = {2017}
},
@article{Cunningham1993,
abstract = {W. Cunningham, “The WyCash portfolio management system,” Proc. Object-Oriented Programming Systems, Languages, and Applications (OOPSLA '92) (Addendum), ACM Press, Apr. 1993, pp. 29–30, doi: 10.1145/157709.157715. [2]},
author = {Cunningham, Ward},
doi = {10.1145/157710.157715},
isbn = {0-89791-610-7},
issn = {10556400},
journal = {ACM SIGPLAN OOPS Messenger},
number = {2},
pages = {29--30},
title = {{The WyCash portfolio management system}},
url = {http://portal.acm.org/citation.cfm?doid=157710.157715},
volume = {4},
year = {1993}
},
@article{Li2015,
abstract = {Context: Technical debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefit but may hurt the long-term health of a software system. Objective: This work aims at collecting studies on TD and TD management (TDM), and making a classification and thematic analysis on these studies, to obtain a comprehensive understanding on the TD concept and an overview on the current state of research on TDM. Method: A systematic mapping study was performed to identify and analyze research on TD and its management, covering publications between 1992 and 2013. Results: Ninety-four studies were finally selected. TD was classified into 10 types, 8 TDM activities were identified, and 29 tools for TDM were collected. Conclusions: The term "debt" has been used in different ways by different people, which leads to ambiguous interpretation of the term. Code-related TD and its management have gained the most attention. There is a need formore empirical studieswith high-quality evidence on thewhole TDM process and on the application of specific TDM approaches in industrial settings. Moreover, dedicated TDM tools are needed for managing various types of TD in the whole TDM process.},
author = {Li, Zengyang and Avgeriou, Paris and Liang, Peng},
doi = {10.1016/j.jss.2014.12.027},
isbn = {0164-1212},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Systematic mapping study,Technical debt,Technical debt management},
pages = {193--220},
publisher = {Elsevier Ltd.},
title = {{A systematic mapping study on technical debt and its management}},
url = {http://dx.doi.org/10.1016/j.jss.2014.12.027},
volume = {101},
year = {2015}
},
@article{Fontana2011,
abstract = {Detecting code smells in the code and consequently applying the right refactoring steps when necessary is very important to improve the quality of the code. Different tools have been proposed for code smell detection, each one characterized by particular features. The aim of this paper is to describe our experience on using different tools for code smell detection. We outline the main differences among them and the different results we obtained.},
author = {Fontana, Francesca Arcelli and Mariani, Elia and Morniroli, Andrea and Sormani, Raul and Tonello, Alberto},
doi = {10.1109/ICSTW.2011.12},
isbn = {9780769543451},
journal = {Proceedings - 4th IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2011},
keywords = {Code smell detection tools,Code smells,Quality code evaluation,Refactoring},
pages = {450--457},
title = {{An experience report on using code smells detection tools}},
year = {2011}
},
@article{Fontana2016,
abstract = {{\textcopyright} 2016 IEEE.In software maintenance and evolution, it is important to assess both code and architecture in order to identify issues to be solved to improve software quality. Different tools provide some kind of index giving us an overall evaluation of a project to be used when managing its technical debt. In this paper, we outline how the indexes, that we call in general Technical Debt Indexes, provided by five different tools are computed. We describe their principal features and differences, what aspects they are missing, and we outline if (and how) the indexes take into account architectural problems that could have a major impact on the architectural debt. We show that the indexes rely on different information sources and measure different quantities.},
author = {Fontana, Francesca Arcelli and Roveda, Riccardo and Zanoni, Marco},
doi = {10.1109/MTD.2016.11},
isbn = {9781509038541},
journal = {Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016},
keywords = {Architectural Debt,Software Quality Analysis Tools,Technical Debt Indexes},
pages = {28--31},
title = {{Technical Debt Indexes Provided by Tools: A Preliminary Discussion}},
year = {2016}
},
@article{Fowler1999,
abstract = {As the application of object technology-particularly the Java programming language-has become commonplace, a new problem has emerged to confront the software development community. Significant numbers of poorly designed programs have been created by less-experienced developers, resulting in applications that are inefficient and hard to maintain and extend. Increasingly, software system professionals are discovering just how difficult it is to work with these inherited, "non-optimal" applications. For several years, expert-level object programmers have employed a growing collection of techniques to improve the structural integrity and performance of such existing software programs. Referred to as "refactoring," these practices have remained in the domain of experts because no attempt has been made to transcribe the lore into a form that all developers could use. . .until now. In Refactoring: Improving the Design of Existing Software, renowned object technology mentor Martin Fowler breaks new ground, demystifying these master practices and demonstrating how software practitioners can realize the significant benefits of this new process. With proper training a skilled system designer can take a bad design and rework it into well-designed, robust code. In this book, Martin Fowler shows you where opportunities for refactoring typically can be found, and how to go about reworking a bad design into a good one. Each refactoring step is simple-seemingly too simple to be worth doing. Refactoring may involve moving a field from one class to another, or pulling some code out of a method to turn it into its own method, or even pushing some code up or down a hierarchy. While these individual steps may seem elementary, the cumulative effect of such small changes can radically improve the design. Refactoring is a proven way to prevent software decay. In addition to discussing the various techniques of refactoring, Refactoring: Improving the Design of Existing Software provides a detailed catalog of more than seventy proven refactorings with helpful pointers that teach you when to apply them; step-by-step instructions for applying each refactoring; and an example illustrating how the refactoring works. The illustrative examples are written in Java, but the ideas are applicable to any object-oriented programming language.},
archivePrefix = {arXiv},
arxivId = {arXiv:gr-qc/9809069v1},
author = {Fowler, Martin and Beck, Kent and Brant, John and Opdyke, William and Roberts, Don},
doi = {10.1007/s10071-009-0219-y},
eprint = {9809069v1},
isbn = {9780201485677},
issn = {14359456},
journal = {Xtemp01},
pages = {1--337},
pmid = {19263100},
primaryClass = {arXiv:gr-qc},
title = {{Refactoring: Improving the Design of Existing Code}},
year = {1999}
},
@article{Olbrich2009,
author = {Olbrich, Steffen and Cruzes, Daniela S. and Basili, Victor and Zazworka, Nico},
isbn = {9781424448418},
journal = {Proceedings of the 2009 3rd international symposium on empirical software engineering and measurement, IEEE Computer Society},
number = {April},
pages = {390--400},
title = {{The Evolution and Impact of Code Smells : A Case Study of Two Open Source Systems What are code smells ?}},
year = {2009}
},
@article{Khomh2009,
abstract = {Code smells are poor implementation choices, thought to make object-oriented systems hard to maintain. In this study, we investigate if classes with code smells are more change-prone than classes without smells. Specifically, we test the general hypothesis: classes with code smells are not more change prone than other classes. We detect 29 code smells in 9 releases of Azureus and in 13 releases of Eclipse, and study the relation between classes with these code smells and class change-proneness. We show that, in almost all releases of Azureus and Eclipse, classes with code smells are more change-prone than others, and that specific smells are more correlated than others to change-proneness. These results justify a posteriori previous work on the specification and detection of code smells and could help focusing quality assurance and testing activities.},
author = {Khomh, Foutse and {Di Penta}, Massimiliano and Gu{\'{e}}h{\'{e}}neuc, Yann Ga{\"{e}}l},
doi = {10.1109/WCRE.2009.28},
isbn = {9780769538679},
issn = {10951350},
journal = {Proceedings - Working Conference on Reverse Engineering, WCRE},
keywords = {Code smells,Empirical software engineering,Mining software repositories},
pages = {75--84},
title = {{An exploratory study of the impact of code smells on software change-proneness}},
year = {2009}
},
@article{Charalampidou2017,
abstract = {{\textcopyright} 2017 Association for Computing Machinery. An important parameter in deciding to eliminate technical debt (TD) is the probability of a module to generate interest along software evolution. In this study, we explore code smells, which according to practitioners are the most commonly occurring type of TD in industry, by assessing the associated interest probability. As a proxy of smell interest probability we use the frequency of smell occurrences and the change proneness of the modules in which they are identified. To achieve this goal we present a case study on 47,751 methods extracted from two well-known open source projects. The results of the case study suggest that: (a) modules in which "code smells" are concentrated are more change-prone than smell-free modules, (b) there are specific types of "code smells" that are concentrated in the most change-prone modules, and (c) interest probability of code clones seems to be higher than the other two examined code smells. These results can be useful for both researchers and practitioners, in the sense that the former can focus their research on resolving "code smells" that produce more interest, and the latter can improve accordingly the prioritization of their repayment strategy and their training.},
author = {Charalampidou, S. and Ampatzoglou, A. and Chatzigeorgiou, A. and Avgeriou, P.},
doi = {10.1145/3120459.3120465},
isbn = {9781450352642},
journal = {ACM International Conference Proceeding Series},
keywords = {Case study,Change proneness,Interest probability,Technical debt},
title = {{Assessing code smell interest probability: A case study}},
volume = {Part F1299},
year = {2017}
},
@article{Sae-Lim2016,
abstract = {To find opportunities for applying prefactoring, several techniques for detecting bad smells in source code have been proposed. Existing smell detectors are often unsuitable for developers who have a specific context because these detectors do not consider their current context and output the results that are mixed with both smells that are and are not related to such context. Consequently, the developers must spend a considerable amount of time identifying relevant smells. As described in this paper, we propose a technique to prioritize bad code smells using developers' context. The explicit data of the context are obtained using a list of issues extracted from an issue tracking system. We applied impact analysis to the list of issues and used the results to specify which smells are associated with the context. Consequently, our approach can provide developers with a list of prioritized bad code smells related to their current context. Several evaluations using open source projects demonstrate the effectiveness of our technique.},
author = {Sae-Lim, Natthawute and Hayashi, Shinpei and Saeki, Motoshi},
doi = {10.1109/ICPC.2016.7503705},
isbn = {9781509014286},
issn = {20477473},
journal = {IEEE International Conference on Program Comprehension},
title = {{Context-based code smells prioritization for prefactoring}},
volume = {2016-July},
year = {2016}
},
@article{Singh2014,
abstract = {Evaluating technical debt related to code structure at a fine-grained level of detail is feasible using static code metrics to identify troublesome areas of a software code base. However, estimating the interest payments at a similar level of detail is a manual process relying on developers to submit their estimates as they encounter instances of technical debt. We propose a framework that continuously estimates interest payments using code comprehension metrics produced by a tool that monitors developer activities in the Integrated Development Environment. We describe the framework and demonstrate how it is used to evaluate the presence of technical debt and interest payments accumulated for code in an industrial software product.},
author = {Singh, Vallary and Snipes, Will and Kraft, Nicholas A.},
doi = {10.1109/MTD.2014.16},
isbn = {9781479967919},
journal = {Proceedings - 2014 6th IEEE International Workshop on Managing Technical Debt, MTD 2014},
keywords = {Technical Debt,code metrics,code smells,program comprehension,software maintenance,static analysis},
pages = {27--30},
title = {{A framework for estimating interest on technical debt by monitoring developer activity related to code comprehension}},
year = {2014}
},
@misc{SteveMcConnel,
  author = {Steve McConnel},
  title = {{10x Software Development - Technical Debt}},
  howpublished = "\url{http://www.construx.com/10x_Software_Development/Technical_Debt/}",
  year = {2007}
},
@misc{TDQuadrants,
  author = {Martin Fowler},
  title = {{Technical Debt Quadrant}},
  howpublished = "\url{https://martinfowler.com/bliki/TechnicalDebtQuadrant.html}",
  year = {2009}
},
@misc{TDMartin,
  author = {Martin Fowler},
  title = {{Technical Debt}},
  howpublished = "\url{https://martinfowler.com/bliki/TechnicalDebt.html}",
  year = {2009}
},
@misc{GoogleTrends,
  author = {Google},
  title = {{Google Trends}},
  howpublished = "\url{https://trends.google.co.uk/trends/}"
},
@misc{debt-investopedia,
  author = {Investopedia},
  title = {{Finance Debt}},
  howpublished = "\url{https://www.investopedia.com/terms/d/debt.asp}"
},
@misc{option-investopedia,
  author = {Investopedia},
  title = {{Option}},
  howpublished = "\url{https://www.investopedia.com/terms/o/option.asp}"
},
@misc{UnhedgedCallOption,
  author={Frances Lash},
  title={{Bad code isn't Technical Debt, it's an unhedged Call Option}},
  howpublished = "\url{http://www.ontechnicaldebt.com/blog/bad-code-isnt-technical-debt-its-an-unhedged-call-option/}",
  year = {2014}
},



















